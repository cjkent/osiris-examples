Resources:

  # This policy defines the permissions given to the application code.
  # By default it is allowed to write to CloudWatch logs and nothing else.
  # If the application needs access to any other resources, for example a database or message queue, then
  # the permissions should be added to this policy.
  #
  # The DynamoDB example project shows how to add permissions for accessing DynamoDB database tables:
  #   https://github.com/cjkent/osiris-examples/blob/master/dynamodb/core/src/main/cloudformation/root.template#L17
  #
  # See the AWS documentation for more details:
  #   https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html
  #
  LambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref LambdaRole
      PolicyName: LambdaPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "logs:*"
            Resource: "arn:aws:logs:*:*:*"

  # This role is used by the lambda function containing the application logic.
  # It should not be necessary to modify it except to delete ManagedPolicyArns if it is not required.
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      # This is required for running the application in a VPC. It can be deleted if VPC access is not required.
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: OsirisExample

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: OsirisExampleClient
      GenerateSecret: false
      UserPoolId: !Ref UserPool

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      # Use the account ID in the domain to ensure it's unique
      Domain: !Sub "osiris-example-${AWS::AccountId}"
      UserPoolId: !Ref UserPool

  # This references the CloudFormation file generated by Osiris. This defines the REST API in API Gateway and the
  # lambda that contains the application logic.
  #
  # It should not be necessary to edit it apart from adding parameters. The LambdaRole parameter must not be removed
  # or changed.
  #
  # There are two reasons to add parameters:
  #
  #   1) When running the application in a VPC the subnet IDs and security group IDs must be provided.
  #      See here for details: https://github.com/cjkent/osiris/wiki/Deploying-to-a-VPC
  #
  #   2) If you define resources in this file and need to pass values into the application code.
  #      Any parameters defined here are automatically passed to the application code as environment variables.
  #
  ApiStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${codeS3Bucket}.s3.${AWS::Region}.amazonaws.com/osiris-cognito-example.template"
      Parameters:
        LambdaRole: !GetAtt LambdaRole.Arn
        CognitoUserPoolArn: !GetAtt UserPool.Arn
